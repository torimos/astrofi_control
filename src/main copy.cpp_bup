#include <Arduino.h>

#define SEL_IN  22
#define SEL_OUT 23
// SEL/RTS              - GRAY  / GRAY
// GND                  - RED   / BLACK
// SER1 (from DEVICE)   - YELOW / ORANGE
// 12V                  - GREEN / BLUE
// SER2 (from MAIN/INT) - BROWN / BROWN
// NC/CTS               - WHITE / WHITE

HardwareSerial mount(2);

#define AZM 0x10
#define ALT 0x11

uint8_t   maxSpd = 0x09;
uint8_t   stopSpd = 0x00;
uint8_t   posDir = 0;
uint8_t   negDir = 1;
uint8_t   rsp[10];

uint32_t  position[2];
uint8_t   selAxis = ALT;
void receive();
void sendCmd(uint8_t dst, uint8_t id, uint8_t* data, uint8_t len) ;

void setup() {
  Serial.begin(115200);
  mount.begin(19200, SERIAL_8N1);

  pinMode(SEL_OUT, OUTPUT);
  digitalWrite(SEL_OUT, HIGH);
  pinMode(SEL_IN, INPUT_PULLUP);
  Serial.println("Ready.");
  Serial.flush();

#if DEBUG
  // Test SEL_OUT and SEL_IN
  delay(10);
  if (digitalRead(SEL_IN) == LOW) {
    Serial.println("SEL_IN not HIGH");
  }
  digitalWrite(SEL_OUT, LOW);
  delay(10);
  if (digitalRead(SEL_IN) == HIGH) {
    Serial.println("SEL_IN not LOW");
  }
  digitalWrite(SEL_OUT, HIGH);
#endif
}

void receive() {
  while (mount.available()) {
    unsigned char cc = mount.read();
#if DEBUG
    if (cc < 0x10)
      Serial.print('0');
    Serial.print(cc, 16);
    Serial.print(' ');
#endif
  }
}

void sendCmd(uint8_t dst, uint8_t id, uint8_t* data, uint8_t len) {
#if DEBUG
    Serial.println("sendCmd(start)");
#endif
    digitalWrite(SEL_OUT, LOW);                     // Select SEL_OUT LOW (send)
    delayMicroseconds(50);
#if DEBUG>1
    Serial.println("Select SEL_OUT LOW (send)");
#endif
    mount.write(0x3B);
    receive();
    mount.write(0x03 + len);
    receive();
    mount.write(0x0D);
    receive();
    mount.write(dst);
    receive();
    mount.write(id);
    receive();
    uint8_t crc = (0x03 + 0x0D) + len + dst + id;
    for (uint8_t ii = 0; ii < len; ii++) {
      mount.write(data[ii]);
      receive();
      crc += data[ii];
    }
    mount.write(((~crc) + 1) & 0xFF);
    mount.flush();
    digitalWrite(SEL_OUT, HIGH);                  // Select SEL_OUT HIGH (receive)
#if DEBUG
    Serial.print("3B ");
    if (len < 10) Serial.print('0'); Serial.print(0x03 + len, 16);Serial.print(' ');
    Serial.print("0D ");
    if (dst < 10) Serial.print('0'); Serial.print(dst, 16);Serial.print(' ');
    if (id < 10) Serial.print('0'); Serial.print(id, 16);Serial.print(' ');
    Serial.print(crc, 16);
    Serial.println();
    //Serial.println("Select SEL_OUT HIGH (receive)");
    //Serial.println("s1 - Wait for SEL_IN to go HIGH");
#endif
#if 1
    while (digitalRead(SEL_IN) == LOW) {          // Wait for SEL_IN to go HIGH
      receive();
    }
#endif
#if DEBUG>1
    Serial.println("s2 - Wait for SEL_IN to go LOW");
#endif
    for (int ii = 0; ii < 1000; ii++) {           // Wait for SEL_IN to go LOW
      if (digitalRead(SEL_IN) == LOW)
        break;
      delayMicroseconds(50);
    }
#if DEBUG>1
   Serial.println("s3 - Read response while SEL_IN is LOW");
#endif
    int idx = 0; int t=0;
    Serial.print("SEL_IN=");
    Serial.println(digitalRead(SEL_IN));
    while (t++<1000){//digitalRead(SEL_IN) == LOW) {           // Read response while SEL_IN is LOW
      delayMicroseconds(50);
      if (mount.available()) {
        unsigned char cc = mount.read();
        rsp[idx++] = cc;
      }
      if (idx>4)
      {
        int sz = rsp[1];
        if (sz == (idx-3)) break;
      }
    }
#if DEBUG
    Serial.print("Resp Len=");
    Serial.print(idx);
    Serial.println();
    for (int ii = 0; ii < idx; ii++) {
      unsigned char cc =rsp[ii];
      if (cc < 0x10)
        Serial.print('0');
      Serial.print(cc, 16);
      Serial.print(' ');
    }
    if (idx>0)
      Serial.println();
#endif
#if DEBUG
    Serial.println("sendCmd(end)");
#endif
}

// Move to position at maximum motor speed (9)
void gotoFast (uint8_t dst, uint32_t pos) {
  uint8_t tmp[] = {(pos >> 16) & 0xFF, (pos >> 8) & 0xFF, pos & 0xFF};
  sendCmd(dst, 0x02, (uint8_t*) &tmp, 3);
}

// Move to position at slow motor speed (?)
void gotoSlow (uint8_t dst, uint32_t pos) {
  uint8_t tmp[] = {(pos >> 16) & 0xFF, (pos >> 8) & 0xFF, pos & 0xFF};
  sendCmd(dst, 0x17, (uint8_t*) &tmp, 3);
}

// Set position of axis to 'pos' (does not move axis)
void setPosition (uint8_t dst, uint32_t pos) {
  uint8_t tmp[] = {(pos >> 16) & 0xFF, (pos >> 8) & 0xFF, pos & 0xFF};
  sendCmd(dst, 0x04, (uint8_t*) &tmp, 3);
}

uint32_t getPosition (uint8_t dst) {
  sendCmd(dst, 0x01, 0, 0);
  return (rsp[5] << 16) + (rsp[6] << 8) + rsp[7];
}

void loop() {
  receive();
  if (Serial.available()) {
    unsigned char cc = Serial.read();
#if DEBUG
    Serial.println();
    Serial.println();
    Serial.print("Key: ");
    Serial.println((char) cc, 16);
#endif
    switch (cc) {
      case '[':
        selAxis = ALT;
        Serial.println("ALT axis selected");
        break;
      case ']':
        selAxis = AZM;
        Serial.println("AZM axis selected");
        break;
      case '0':
        Serial.println("Stop Slew of Selected Axis");
        sendCmd(selAxis, 0x24, &stopSpd, 1);
        break;
      case '1':
        Serial.println("Slew Selected Axis in negative direction on the Selected Axis");
        sendCmd(selAxis, 0x25, &maxSpd, 1);
        break;
      case '2':
        Serial.println("Slew Selected Axis in positive direction on the Selected Axis");
        sendCmd(selAxis, 0x24, &maxSpd, 1);
        break;
      case '-':
        Serial.println("Rotate in negative direction by 0x100000 (1/16 of a revolution)");
        gotoFast(selAxis, position[selAxis & 1] = (position[selAxis & 1] - 0x100000) & 0xFFFFFF);
        break;
      case '+':
        Serial.println("Rotate in positive direction by 0x100000 (1/16 of a revolution)");
        gotoFast(selAxis, position[selAxis & 1] = (position[selAxis & 1] + 0x100000) & 0xFFFFFF);
        break;
      case 'x':
        Serial.println("Move Selected Axis to position 0x000000");
        gotoFast(selAxis, 0x000000);
        break;
      case 'g':
        Serial.println("Get Selected Axis current position");
        Serial.println(getPosition(selAxis) & 0xFFFFFF, 16);
        break;
      case 's':
        Serial.println("Set Selected Axis current position to 0x000000");
        setPosition(selAxis, 0x000000);
        position[selAxis & 1] = 0x000000;
        break;
      case 'v':
        Serial.println("Get Firmware Version number");
        sendCmd(AZM, 0xFE, 0, 0); 
        Serial.print(rsp[5]);
        Serial.print('.');
        Serial.print(rsp[6]);
        Serial.print('.');
        Serial.print(rsp[7]);
        Serial.print('.');
        Serial.println(rsp[8]);
        break;
      case '?':
        Serial.println("OK");
        break;
    }
    // Delay before processing next command to avoid overrun
    delay(100);
  }
}